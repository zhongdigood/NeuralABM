# Generate densities by n_samples drawing from the three-dimensional joint distribution of the parameters
densities_from_joint:
  based_on:
    - .creator.multiverse
    - .plot.facet_grid.errorbands
    - .cycler_blue_orange_brown
  dag_options:
    define:
      n_samples: 100
  select_and_combine:
    fields:
      parameters:
        path: parameters
        transform: [.data]
      probabilities:
        path: loss
        transform: [neg_exp]
      true_data:
        path: true_counts
        transform: [.data]
        subspace:
          seed: [ 0 ]
      cfg:
        path: ../../cfg
        transform:
          - getitem: [!dag_prev , 'Damper']
        subspace:
          seed: [0]
  transform:

    # Flatten the cfg
    - .data: [!dag_tag cfg]
    - getitem: [!dag_prev , 0]
      tag: cfg_flattened

    # Flatten the true counts
    - .isel: [!dag_tag true_data, {seed: 0}]
      kwargs: {drop: True}
      tag: true_data_flattened

    # Flatten the probabilities and parameters and drawn n_samples
    - flatten_dims: [!dag_tag probabilities ]
      kwargs:
        dims: {sample: [batch, seed]}
    - .coords: [!dag_prev , 'sample']
    - len: [!dag_prev ]
    - np.randint: [0, !dag_prev , !dag_tag n_samples]
      tag: sample_idx
    - .isel: [!dag_node -4, {'sample': !dag_prev }]
      tag: prob
    - flatten_dims: [!dag_tag parameters ]
      kwargs:
        dims: {sample: [batch, seed]}
    - .isel: [!dag_prev , {'sample': !dag_tag sample_idx}]
    - .transpose: [!dag_prev ]
      tag: params

    # Get the unnormalised joint distribution and set nan entries to zero (they will be skipped in the density
    # calculation)
    - joint_DD: [!dag_tag params, !dag_tag prob ]
      kwargs:
        bins: 100
      file_cache:
        read: False
        write: False
      tag: joint
    - .fillna: [!dag_tag joint , 0]
    - Damper_densities_from_joint: [!dag_prev ]
      kwargs:
        true_counts: !dag_tag true_data_flattened
        cfg: !dag_tag cfg_flattened
      tag: data
  x: time
  y: mean
  yerr: std
  hue: type
  col: kind
  helpers:
    set_labels:
      x: 'Time'
      y: ''

# Plot the marginals together
marginals:
  based_on:
    - .creator.multiverse
    - .plot.facet_grid.density
  select_and_combine:
    fields:
      parameters: parameters
      probabilities:
        path: loss
        transform: [neg_exp]
  transform:
    # Flatten the prob and parameter samples into a single dimension
    - flatten_dims: [!dag_tag probabilities ]
      kwargs:
        dims: {sample: [batch, seed]}
      tag: prob
    - flatten_dims: [!dag_tag parameters ]
      kwargs:
        dims: {sample: [batch, seed]}
      tag: params
    - broadcast: [!dag_tag params, !dag_tag prob ]
    # Calculate the approximate marginals (by calculating the joint of the parameters with the likelihood)
    - marginal_from_ds: [!dag_prev ]
      kwargs:
        x: x
        y: loss
        exclude_dim: [parameter]
      tag: data
  x: x
  y: y
  col: parameter
  c: !dag_result c_darkblue
  sharex: False
  sharey: False
  smooth_kwargs:
    smoothing: 1.0
    enabled: True

# Plot the initial value distribution on the parameters
initial_values:
  based_on: initial_values

# Plot the predictions over time, colour-coded by loss
predictions:
  based_on:
    - .creator.multiverse
    - .plot.facet_grid.scatter
  select_and_combine:
    fields:
      parameters:
        path: parameters
        transform: [.data]
      loss:
        path: loss
        transform: [.data]
  transform:
    - broadcast: [!dag_tag parameters, !dag_tag loss]
      kwargs:
        exclude_dim: [seed]
    - flatten_dims: [!dag_prev ]
      kwargs:
        dims: {batch: [batch, seed]}
      tag: data
  x: batch
  y: x
  hue: loss
  col: parameter
  s: 2
  sharey: False # Seems to have no effect?
  sharex: False
  helpers:
    set_limits:
      x: [min, max]
      y: [0, max] # Why is this necessary?
  add_legend: False
  norm:
    name: LogNorm
  vmax: 100
  cmap: &cmap
    continuous: true
    from_values:
      0: !dag_result c_darkblue
      1: !dag_result c_yellow

# Plot the loss landscape of the parameters, colour-coded by loss
probability_landscape:
  based_on: predictions
  add_legend: False
  select_and_combine:
    fields:
      loss:
        transform:
          - mul: [!dag_prev , -1]
          - np.exp: [!dag_prev ]
  x: x
  y: loss
  hue: loss
  s: 2
  norm: ~
  vmax: ~
  cbar_kwargs:
    label: Unnormalised probability

# Plot the joint
joint:
  based_on:
    - .creator.multiverse
    - .plot.facet_grid.pcolormesh
  select_and_combine:
    fields:
      parameters: parameters
      probabilities:
        path: loss
        transform: [neg_exp]
  transform:
    # Flatten the prob and parameter samples into a single dimension
    - flatten_dims: [!dag_tag probabilities ]
      kwargs:
        dims: {sample: [batch, seed]}
      tag: prob
    - flatten_dims: [!dag_tag parameters ]
      kwargs:
        dims: {sample: [batch, seed]}
      tag: params

    # Compute the joint
    - joint_2D_ds: [!dag_tag params, !dag_tag prob]
      kwargs:
        x: p_infect
        y: t_infectious
      tag: data
  x: p_infect
  y: t_infectious
  cmap:
    <<: *cmap
  cbar_kwargs:
    label: ~
  style:
    figure.figsize: [!dag_result half_width, !dag_result half_width]

# Plot the density of samples in 2D
point_density:
  based_on:
    - .creator.multiverse
    - .plot.facet_grid.pcolormesh
    - joint
  select_and_combine:
    fields:
      parameters: parameters
      loss:
        path: loss
  transform:
    # Flatten the prob and parameter samples into a single dimension
    - flatten_dims: [!dag_tag probabilities ]
      kwargs:
        dims: {sample: [batch, seed]}
      tag: prob
    - flatten_dims: [!dag_tag parameters ]
      kwargs:
        dims: {sample: [batch, seed]}
      tag: params

    - joint_2D_ds: [!dag_tag params, !dag_tag prob]
      kwargs:
        statistic: count
        x: p_infect
        y: t_infectious
      tag: data
  x: p_infect
  y: t_infectious
  vmin: 1
  norm:
    name: LogNorm
  cmap:
    <<: *cmap
  cbar_kwargs:
    label: ~
  style:
    figure.figsize: [!dag_result half_width, !dag_result half_width]
